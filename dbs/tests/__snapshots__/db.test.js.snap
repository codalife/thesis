// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`has have methods 1`] = `
Object {
  "category": [Function],
  "sequelize": Sequelize {
    "config": Object {
      "database": "videos",
      "dialectModulePath": null,
      "dialectOptions": undefined,
      "host": "localhost",
      "keepDefaultTimezone": undefined,
      "native": false,
      "password": null,
      "pool": Object {},
      "port": 5432,
      "protocol": "tcp",
      "replication": false,
      "ssl": undefined,
      "username": "",
    },
    "connectionManager": ConnectionManager {
      "_onProcessExit": [Function],
      "config": Object {
        "database": "videos",
        "dialectModulePath": null,
        "dialectOptions": undefined,
        "host": "localhost",
        "keepDefaultTimezone": undefined,
        "native": false,
        "password": null,
        "pool": Object {
          "Promise": [Function],
          "acquire": 10000,
          "evict": 10000,
          "handleDisconnects": true,
          "idle": 10000,
          "max": 5,
          "min": 0,
          "validate": [Function],
        },
        "port": undefined,
        "protocol": "tcp",
        "replication": false,
        "ssl": undefined,
        "username": "",
      },
      "dialect": PostgresDialect {
        "QueryGenerator": Object {
          "OperatorMap": Object {
            Symbol(eq): "=",
            Symbol(ne): "!=",
            Symbol(gte): ">=",
            Symbol(gt): ">",
            Symbol(lte): "<=",
            Symbol(lt): "<",
            Symbol(not): "IS NOT",
            Symbol(is): "IS",
            Symbol(in): "IN",
            Symbol(notIn): "NOT IN",
            Symbol(like): "LIKE",
            Symbol(notLike): "NOT LIKE",
            Symbol(iLike): "ILIKE",
            Symbol(notILike): "NOT ILIKE",
            Symbol(regexp): "~",
            Symbol(notRegexp): "!~",
            Symbol(iRegexp): "~*",
            Symbol(notIRegexp): "!~*",
            Symbol(between): "BETWEEN",
            Symbol(notBetween): "NOT BETWEEN",
            Symbol(overlap): "&&",
            Symbol(contains): "@>",
            Symbol(contained): "<@",
            Symbol(adjacent): "-|-",
            Symbol(strictLeft): "<<",
            Symbol(strictRight): ">>",
            Symbol(noExtendRight): "&<",
            Symbol(noExtendLeft): "&>",
            Symbol(any): "ANY",
            Symbol(all): "ALL",
            Symbol(and): " AND ",
            Symbol(or): " OR ",
            Symbol(col): "COL",
            Symbol(placeholder): "$$PLACEHOLDER$$",
            Symbol(raw): "DEPRECATED",
          },
          "OperatorsAliasMap": Object {
            "!..": Symbol(notBetween),
            "$adjacent": Symbol(adjacent),
            "$all": Symbol(all),
            "$and": Symbol(and),
            "$any": Symbol(any),
            "$between": Symbol(between),
            "$col": Symbol(col),
            "$contained": Symbol(contained),
            "$contains": Symbol(contains),
            "$eq": Symbol(eq),
            "$gt": Symbol(gt),
            "$gte": Symbol(gte),
            "$iLike": Symbol(iLike),
            "$iRegexp": Symbol(iRegexp),
            "$ilike": Symbol(iLike),
            "$in": Symbol(in),
            "$is": Symbol(is),
            "$like": Symbol(like),
            "$lt": Symbol(lt),
            "$lte": Symbol(lte),
            "$ne": Symbol(ne),
            "$noExtendLeft": Symbol(noExtendLeft),
            "$noExtendRight": Symbol(noExtendRight),
            "$not": Symbol(not),
            "$notBetween": Symbol(notBetween),
            "$notILike": Symbol(notILike),
            "$notIRegexp": Symbol(notIRegexp),
            "$notIn": Symbol(notIn),
            "$notLike": Symbol(notLike),
            "$notRegexp": Symbol(notRegexp),
            "$notlike": Symbol(notLike),
            "$or": Symbol(or),
            "$overlap": Symbol(overlap),
            "$raw": Symbol(raw),
            "$regexp": Symbol(regexp),
            "$strictLeft": Symbol(strictLeft),
            "$strictRight": Symbol(strictRight),
            "$values": Symbol(values),
            "&&": Symbol(overlap),
            "..": Symbol(between),
            "<@": Symbol(contained),
            "@>": Symbol(contains),
            "between": Symbol(between),
            "gt": Symbol(gt),
            "gte": Symbol(gte),
            "ilike": Symbol(iLike),
            "in": Symbol(in),
            "like": Symbol(like),
            "lt": Symbol(lt),
            "lte": Symbol(lte),
            "nbetween": Symbol(notBetween),
            "ne": Symbol(ne),
            "nlike": Symbol(notLike),
            "not": Symbol(not),
            "notIn": Symbol(notIn),
            "notbetween": Symbol(notBetween),
            "notilike": Symbol(notILike),
            "overlap": Symbol(overlap),
          },
          "_castKey": [Function],
          "_checkValidJsonStatement": [Function],
          "_dialect": [Circular],
          "_findField": [Function],
          "_getJsonCast": [Function],
          "_getSafeKey": [Function],
          "_joinKeyValue": [Function],
          "_prefixKey": [Function],
          "_replaceAliases": [Function],
          "_templateSettings": Object {
            "escape": /<%-\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
            "evaluate": /<%\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
            "imports": Object {
              "_": [Function],
            },
            "interpolate": /<%=\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
            "variable": "",
          },
          "_toJSONValue": [Function],
          "_traverseJSON": [Function],
          "_whereBind": [Function],
          "_whereGroupBind": [Function],
          "_whereJSON": [Function],
          "_whereParseSingleValueObject": [Function],
          "addColumnQuery": [Function],
          "addConstraintQuery": [Function],
          "addIndexQuery": [Function],
          "addLimitAndOffset": [Function],
          "addSchema": [Function],
          "arithmeticQuery": [Function],
          "attributeToSQL": [Function],
          "attributesToSQL": [Function],
          "booleanValue": [Function],
          "bulkInsertQuery": [Function],
          "changeColumnQuery": [Function],
          "commitTransactionQuery": [Function],
          "createFunction": [Function],
          "createSchema": [Function],
          "createTableQuery": [Function],
          "createTrigger": [Function],
          "dataTypeMapping": [Function],
          "databaseConnectionUri": [Function],
          "decodeTriggerEventType": [Function],
          "deferConstraintsQuery": [Function],
          "deleteQuery": [Function],
          "describeTableQuery": [Function],
          "dialect": "postgres",
          "dropForeignKeyQuery": [Function],
          "dropFunction": [Function],
          "dropSchema": [Function],
          "dropTableQuery": [Function],
          "dropTrigger": [Function],
          "escape": [Function],
          "escapeAttributes": [Function],
          "exceptionFn": [Function],
          "expandFunctionParamList": [Function],
          "expandOptions": [Function],
          "expandTriggerEventSpec": [Function],
          "extractTableDetails": [Function],
          "fn": [Function],
          "fromArray": [Function],
          "generateInclude": [Function],
          "generateJoin": [Function],
          "generateThroughJoin": [Function],
          "generateTransactionId": [Function],
          "getConstraintSnippet": [Function],
          "getForeignKeysQuery": [Function],
          "getQueryOrders": [Function],
          "getWhereConditions": [Function],
          "handleSequelizeMethod": [Function],
          "insertQuery": [Function],
          "isIdentifierQuoted": [Function],
          "jsonPathExtractionQuery": [Function],
          "nameIndexes": [Function],
          "options": Object {
            "benchmark": false,
            "databaseVersion": 0,
            "define": Object {},
            "dialect": "postgres",
            "dialectModulePath": null,
            "hooks": Object {},
            "host": "localhost",
            "isolationLevel": null,
            "logging": [Function],
            "native": false,
            "omitNull": false,
            "operatorsAliases": true,
            "pool": Object {},
            "protocol": "tcp",
            "query": Object {},
            "quoteIdentifiers": true,
            "replication": false,
            "retry": Object {
              "match": Array [
                "SQLITE_BUSY: database is locked",
              ],
              "max": 5,
            },
            "ssl": undefined,
            "sync": Object {},
            "timezone": "+00:00",
            "transactionType": "DEFERRED",
            "typeValidation": false,
          },
          "padInt": [Function],
          "parseConditionObject": [Function],
          "pgEnum": [Function],
          "pgEnumAdd": [Function],
          "pgEnumDrop": [Function],
          "pgEnumName": [Function],
          "pgEscapeAndQuote": [Function],
          "pgListEnums": [Function],
          "quote": [Function],
          "quoteIdentifier": [Function],
          "quoteIdentifiers": [Function],
          "quoteTable": [Function],
          "removeColumnQuery": [Function],
          "removeConstraintQuery": [Function],
          "removeIndexQuery": [Function],
          "renameColumnQuery": [Function],
          "renameFunction": [Function],
          "renameTableQuery": [Function],
          "renameTrigger": [Function],
          "rollbackTransactionQuery": [Function],
          "selectFromTableFragment": [Function],
          "selectQuery": [Function],
          "sequelize": [Circular],
          "setAutocommitQuery": [Function],
          "setConstraintQuery": [Function],
          "setDeferredQuery": [Function],
          "setImmediateQuery": [Function],
          "setIsolationLevelQuery": [Function],
          "setOperatorsAliases": [Function],
          "setSearchPath": [Function],
          "showConstraintsQuery": [Function],
          "showIndexesQuery": [Function],
          "showSchemasQuery": [Function],
          "showTablesQuery": [Function],
          "startTransactionQuery": [Function],
          "triggerEventTypeIsConstraint": [Function],
          "typeValidation": undefined,
          "updateQuery": [Function],
          "upsertQuery": [Function],
          "versionQuery": [Function],
          "whereItemQuery": [Function],
          "whereItemsQuery": [Function],
          "whereQuery": [Function],
        },
        "connectionManager": [Circular],
        "sequelize": [Circular],
      },
      "dialectName": "postgres",
      "lib": PG {
        "Client": [Function],
        "Connection": [Function],
        "Pool": [Function],
        "Query": [Function],
        "_pools": Array [],
        "defaults": Object {
          "application_name": undefined,
          "binary": false,
          "client_encoding": "",
          "connectionString": undefined,
          "database": "Anuar",
          "fallback_application_name": undefined,
          "host": "localhost",
          "idleTimeoutMillis": 30000,
          "max": 10,
          "parseInputDatesAsUTC": false,
          "parseInt8": undefined,
          "password": null,
          "port": 5432,
          "rows": 0,
          "ssl": false,
          "statement_timeout": false,
          "user": "Anuar",
        },
        "native": null,
        "types": Object {
          "arrayParser": Object {
            "create": [Function],
          },
          "getTypeParser": [Function],
          "setTypeParser": [Function],
        },
      },
      "pool": Pool {
        "_Promise": [Function],
        "_allObjects": Set {},
        "_availableObjects": Deque {
          "_list": DoublyLinkedList {
            "head": null,
            "length": 0,
            "tail": null,
          },
        },
        "_config": PoolOptions {
          "Promise": [Function],
          "acquireTimeoutMillis": 10000,
          "autostart": false,
          "evictionRunIntervalMillis": 10000,
          "fifo": true,
          "idleTimeoutMillis": 10000,
          "max": 5,
          "min": 0,
          "numTestsPerEvictionRun": 3,
          "priorityRange": 1,
          "softIdleTimeoutMillis": -1,
          "testOnBorrow": true,
          "testOnReturn": false,
        },
        "_draining": false,
        "_events": Object {},
        "_eventsCount": 0,
        "_evictionIterator": DequeIterator {
          "_cursor": null,
          "_direction": "next",
          "_done": false,
          "_list": DoublyLinkedList {
            "head": null,
            "length": 0,
            "tail": null,
          },
          "_startPosition": "head",
          "_started": false,
        },
        "_evictor": DefaultEvictor {},
        "_factory": Object {
          "create": [Function],
          "destroy": [Function],
          "validate": [Function],
        },
        "_factoryCreateOperations": Set {},
        "_factoryDestroyOperations": Set {},
        "_maxListeners": undefined,
        "_resourceLoans": Map {},
        "_scheduledEviction": null,
        "_started": false,
        "_testOnBorrowResources": Set {},
        "_testOnReturnResources": Set {},
        "_validationOperations": Set {},
        "_waitingClientsQueue": PriorityQueue {
          "_size": 1,
          "_slots": Array [
            Queue {
              "_list": DoublyLinkedList {
                "head": null,
                "length": 0,
                "tail": null,
              },
            },
          ],
        },
        "domain": null,
      },
      "sequelize": [Circular],
      "versionPromise": null,
    },
    "dialect": PostgresDialect {
      "QueryGenerator": Object {
        "OperatorMap": Object {
          Symbol(eq): "=",
          Symbol(ne): "!=",
          Symbol(gte): ">=",
          Symbol(gt): ">",
          Symbol(lte): "<=",
          Symbol(lt): "<",
          Symbol(not): "IS NOT",
          Symbol(is): "IS",
          Symbol(in): "IN",
          Symbol(notIn): "NOT IN",
          Symbol(like): "LIKE",
          Symbol(notLike): "NOT LIKE",
          Symbol(iLike): "ILIKE",
          Symbol(notILike): "NOT ILIKE",
          Symbol(regexp): "~",
          Symbol(notRegexp): "!~",
          Symbol(iRegexp): "~*",
          Symbol(notIRegexp): "!~*",
          Symbol(between): "BETWEEN",
          Symbol(notBetween): "NOT BETWEEN",
          Symbol(overlap): "&&",
          Symbol(contains): "@>",
          Symbol(contained): "<@",
          Symbol(adjacent): "-|-",
          Symbol(strictLeft): "<<",
          Symbol(strictRight): ">>",
          Symbol(noExtendRight): "&<",
          Symbol(noExtendLeft): "&>",
          Symbol(any): "ANY",
          Symbol(all): "ALL",
          Symbol(and): " AND ",
          Symbol(or): " OR ",
          Symbol(col): "COL",
          Symbol(placeholder): "$$PLACEHOLDER$$",
          Symbol(raw): "DEPRECATED",
        },
        "OperatorsAliasMap": Object {
          "!..": Symbol(notBetween),
          "$adjacent": Symbol(adjacent),
          "$all": Symbol(all),
          "$and": Symbol(and),
          "$any": Symbol(any),
          "$between": Symbol(between),
          "$col": Symbol(col),
          "$contained": Symbol(contained),
          "$contains": Symbol(contains),
          "$eq": Symbol(eq),
          "$gt": Symbol(gt),
          "$gte": Symbol(gte),
          "$iLike": Symbol(iLike),
          "$iRegexp": Symbol(iRegexp),
          "$ilike": Symbol(iLike),
          "$in": Symbol(in),
          "$is": Symbol(is),
          "$like": Symbol(like),
          "$lt": Symbol(lt),
          "$lte": Symbol(lte),
          "$ne": Symbol(ne),
          "$noExtendLeft": Symbol(noExtendLeft),
          "$noExtendRight": Symbol(noExtendRight),
          "$not": Symbol(not),
          "$notBetween": Symbol(notBetween),
          "$notILike": Symbol(notILike),
          "$notIRegexp": Symbol(notIRegexp),
          "$notIn": Symbol(notIn),
          "$notLike": Symbol(notLike),
          "$notRegexp": Symbol(notRegexp),
          "$notlike": Symbol(notLike),
          "$or": Symbol(or),
          "$overlap": Symbol(overlap),
          "$raw": Symbol(raw),
          "$regexp": Symbol(regexp),
          "$strictLeft": Symbol(strictLeft),
          "$strictRight": Symbol(strictRight),
          "$values": Symbol(values),
          "&&": Symbol(overlap),
          "..": Symbol(between),
          "<@": Symbol(contained),
          "@>": Symbol(contains),
          "between": Symbol(between),
          "gt": Symbol(gt),
          "gte": Symbol(gte),
          "ilike": Symbol(iLike),
          "in": Symbol(in),
          "like": Symbol(like),
          "lt": Symbol(lt),
          "lte": Symbol(lte),
          "nbetween": Symbol(notBetween),
          "ne": Symbol(ne),
          "nlike": Symbol(notLike),
          "not": Symbol(not),
          "notIn": Symbol(notIn),
          "notbetween": Symbol(notBetween),
          "notilike": Symbol(notILike),
          "overlap": Symbol(overlap),
        },
        "_castKey": [Function],
        "_checkValidJsonStatement": [Function],
        "_dialect": [Circular],
        "_findField": [Function],
        "_getJsonCast": [Function],
        "_getSafeKey": [Function],
        "_joinKeyValue": [Function],
        "_prefixKey": [Function],
        "_replaceAliases": [Function],
        "_templateSettings": Object {
          "escape": /<%-\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "evaluate": /<%\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "imports": Object {
            "_": [Function],
          },
          "interpolate": /<%=\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "variable": "",
        },
        "_toJSONValue": [Function],
        "_traverseJSON": [Function],
        "_whereBind": [Function],
        "_whereGroupBind": [Function],
        "_whereJSON": [Function],
        "_whereParseSingleValueObject": [Function],
        "addColumnQuery": [Function],
        "addConstraintQuery": [Function],
        "addIndexQuery": [Function],
        "addLimitAndOffset": [Function],
        "addSchema": [Function],
        "arithmeticQuery": [Function],
        "attributeToSQL": [Function],
        "attributesToSQL": [Function],
        "booleanValue": [Function],
        "bulkInsertQuery": [Function],
        "changeColumnQuery": [Function],
        "commitTransactionQuery": [Function],
        "createFunction": [Function],
        "createSchema": [Function],
        "createTableQuery": [Function],
        "createTrigger": [Function],
        "dataTypeMapping": [Function],
        "databaseConnectionUri": [Function],
        "decodeTriggerEventType": [Function],
        "deferConstraintsQuery": [Function],
        "deleteQuery": [Function],
        "describeTableQuery": [Function],
        "dialect": "postgres",
        "dropForeignKeyQuery": [Function],
        "dropFunction": [Function],
        "dropSchema": [Function],
        "dropTableQuery": [Function],
        "dropTrigger": [Function],
        "escape": [Function],
        "escapeAttributes": [Function],
        "exceptionFn": [Function],
        "expandFunctionParamList": [Function],
        "expandOptions": [Function],
        "expandTriggerEventSpec": [Function],
        "extractTableDetails": [Function],
        "fn": [Function],
        "fromArray": [Function],
        "generateInclude": [Function],
        "generateJoin": [Function],
        "generateThroughJoin": [Function],
        "generateTransactionId": [Function],
        "getConstraintSnippet": [Function],
        "getForeignKeysQuery": [Function],
        "getQueryOrders": [Function],
        "getWhereConditions": [Function],
        "handleSequelizeMethod": [Function],
        "insertQuery": [Function],
        "isIdentifierQuoted": [Function],
        "jsonPathExtractionQuery": [Function],
        "nameIndexes": [Function],
        "options": Object {
          "benchmark": false,
          "databaseVersion": 0,
          "define": Object {},
          "dialect": "postgres",
          "dialectModulePath": null,
          "hooks": Object {},
          "host": "localhost",
          "isolationLevel": null,
          "logging": [Function],
          "native": false,
          "omitNull": false,
          "operatorsAliases": true,
          "pool": Object {},
          "protocol": "tcp",
          "query": Object {},
          "quoteIdentifiers": true,
          "replication": false,
          "retry": Object {
            "match": Array [
              "SQLITE_BUSY: database is locked",
            ],
            "max": 5,
          },
          "ssl": undefined,
          "sync": Object {},
          "timezone": "+00:00",
          "transactionType": "DEFERRED",
          "typeValidation": false,
        },
        "padInt": [Function],
        "parseConditionObject": [Function],
        "pgEnum": [Function],
        "pgEnumAdd": [Function],
        "pgEnumDrop": [Function],
        "pgEnumName": [Function],
        "pgEscapeAndQuote": [Function],
        "pgListEnums": [Function],
        "quote": [Function],
        "quoteIdentifier": [Function],
        "quoteIdentifiers": [Function],
        "quoteTable": [Function],
        "removeColumnQuery": [Function],
        "removeConstraintQuery": [Function],
        "removeIndexQuery": [Function],
        "renameColumnQuery": [Function],
        "renameFunction": [Function],
        "renameTableQuery": [Function],
        "renameTrigger": [Function],
        "rollbackTransactionQuery": [Function],
        "selectFromTableFragment": [Function],
        "selectQuery": [Function],
        "sequelize": [Circular],
        "setAutocommitQuery": [Function],
        "setConstraintQuery": [Function],
        "setDeferredQuery": [Function],
        "setImmediateQuery": [Function],
        "setIsolationLevelQuery": [Function],
        "setOperatorsAliases": [Function],
        "setSearchPath": [Function],
        "showConstraintsQuery": [Function],
        "showIndexesQuery": [Function],
        "showSchemasQuery": [Function],
        "showTablesQuery": [Function],
        "startTransactionQuery": [Function],
        "triggerEventTypeIsConstraint": [Function],
        "typeValidation": undefined,
        "updateQuery": [Function],
        "upsertQuery": [Function],
        "versionQuery": [Function],
        "whereItemQuery": [Function],
        "whereItemsQuery": [Function],
        "whereQuery": [Function],
      },
      "connectionManager": ConnectionManager {
        "_onProcessExit": [Function],
        "config": Object {
          "database": "videos",
          "dialectModulePath": null,
          "dialectOptions": undefined,
          "host": "localhost",
          "keepDefaultTimezone": undefined,
          "native": false,
          "password": null,
          "pool": Object {
            "Promise": [Function],
            "acquire": 10000,
            "evict": 10000,
            "handleDisconnects": true,
            "idle": 10000,
            "max": 5,
            "min": 0,
            "validate": [Function],
          },
          "port": undefined,
          "protocol": "tcp",
          "replication": false,
          "ssl": undefined,
          "username": "",
        },
        "dialect": [Circular],
        "dialectName": "postgres",
        "lib": PG {
          "Client": [Function],
          "Connection": [Function],
          "Pool": [Function],
          "Query": [Function],
          "_pools": Array [],
          "defaults": Object {
            "application_name": undefined,
            "binary": false,
            "client_encoding": "",
            "connectionString": undefined,
            "database": "Anuar",
            "fallback_application_name": undefined,
            "host": "localhost",
            "idleTimeoutMillis": 30000,
            "max": 10,
            "parseInputDatesAsUTC": false,
            "parseInt8": undefined,
            "password": null,
            "port": 5432,
            "rows": 0,
            "ssl": false,
            "statement_timeout": false,
            "user": "Anuar",
          },
          "native": null,
          "types": Object {
            "arrayParser": Object {
              "create": [Function],
            },
            "getTypeParser": [Function],
            "setTypeParser": [Function],
          },
        },
        "pool": Pool {
          "_Promise": [Function],
          "_allObjects": Set {},
          "_availableObjects": Deque {
            "_list": DoublyLinkedList {
              "head": null,
              "length": 0,
              "tail": null,
            },
          },
          "_config": PoolOptions {
            "Promise": [Function],
            "acquireTimeoutMillis": 10000,
            "autostart": false,
            "evictionRunIntervalMillis": 10000,
            "fifo": true,
            "idleTimeoutMillis": 10000,
            "max": 5,
            "min": 0,
            "numTestsPerEvictionRun": 3,
            "priorityRange": 1,
            "softIdleTimeoutMillis": -1,
            "testOnBorrow": true,
            "testOnReturn": false,
          },
          "_draining": false,
          "_events": Object {},
          "_eventsCount": 0,
          "_evictionIterator": DequeIterator {
            "_cursor": null,
            "_direction": "next",
            "_done": false,
            "_list": DoublyLinkedList {
              "head": null,
              "length": 0,
              "tail": null,
            },
            "_startPosition": "head",
            "_started": false,
          },
          "_evictor": DefaultEvictor {},
          "_factory": Object {
            "create": [Function],
            "destroy": [Function],
            "validate": [Function],
          },
          "_factoryCreateOperations": Set {},
          "_factoryDestroyOperations": Set {},
          "_maxListeners": undefined,
          "_resourceLoans": Map {},
          "_scheduledEviction": null,
          "_started": false,
          "_testOnBorrowResources": Set {},
          "_testOnReturnResources": Set {},
          "_validationOperations": Set {},
          "_waitingClientsQueue": PriorityQueue {
            "_size": 1,
            "_slots": Array [
              Queue {
                "_list": DoublyLinkedList {
                  "head": null,
                  "length": 0,
                  "tail": null,
                },
              },
            ],
          },
          "domain": null,
        },
        "sequelize": [Circular],
        "versionPromise": null,
      },
      "sequelize": [Circular],
    },
    "importCache": Object {},
    "modelManager": ModelManager {
      "models": Array [
        [Function],
        [Function],
        [Function],
      ],
      "sequelize": [Circular],
    },
    "models": Object {
      "category": [Function],
      "video": [Function],
      "view": [Function],
    },
    "options": Object {
      "benchmark": false,
      "databaseVersion": 0,
      "define": Object {},
      "dialect": "postgres",
      "dialectModulePath": null,
      "hooks": Object {},
      "host": "localhost",
      "isolationLevel": null,
      "logging": [Function],
      "native": false,
      "omitNull": false,
      "operatorsAliases": true,
      "pool": Object {},
      "protocol": "tcp",
      "query": Object {},
      "quoteIdentifiers": true,
      "replication": false,
      "retry": Object {
        "match": Array [
          "SQLITE_BUSY: database is locked",
        ],
        "max": 5,
      },
      "ssl": undefined,
      "sync": Object {},
      "timezone": "+00:00",
      "transactionType": "DEFERRED",
      "typeValidation": false,
    },
    "queryInterface": QueryInterface {
      "QueryGenerator": Object {
        "OperatorMap": Object {
          Symbol(eq): "=",
          Symbol(ne): "!=",
          Symbol(gte): ">=",
          Symbol(gt): ">",
          Symbol(lte): "<=",
          Symbol(lt): "<",
          Symbol(not): "IS NOT",
          Symbol(is): "IS",
          Symbol(in): "IN",
          Symbol(notIn): "NOT IN",
          Symbol(like): "LIKE",
          Symbol(notLike): "NOT LIKE",
          Symbol(iLike): "ILIKE",
          Symbol(notILike): "NOT ILIKE",
          Symbol(regexp): "~",
          Symbol(notRegexp): "!~",
          Symbol(iRegexp): "~*",
          Symbol(notIRegexp): "!~*",
          Symbol(between): "BETWEEN",
          Symbol(notBetween): "NOT BETWEEN",
          Symbol(overlap): "&&",
          Symbol(contains): "@>",
          Symbol(contained): "<@",
          Symbol(adjacent): "-|-",
          Symbol(strictLeft): "<<",
          Symbol(strictRight): ">>",
          Symbol(noExtendRight): "&<",
          Symbol(noExtendLeft): "&>",
          Symbol(any): "ANY",
          Symbol(all): "ALL",
          Symbol(and): " AND ",
          Symbol(or): " OR ",
          Symbol(col): "COL",
          Symbol(placeholder): "$$PLACEHOLDER$$",
          Symbol(raw): "DEPRECATED",
        },
        "OperatorsAliasMap": Object {
          "!..": Symbol(notBetween),
          "$adjacent": Symbol(adjacent),
          "$all": Symbol(all),
          "$and": Symbol(and),
          "$any": Symbol(any),
          "$between": Symbol(between),
          "$col": Symbol(col),
          "$contained": Symbol(contained),
          "$contains": Symbol(contains),
          "$eq": Symbol(eq),
          "$gt": Symbol(gt),
          "$gte": Symbol(gte),
          "$iLike": Symbol(iLike),
          "$iRegexp": Symbol(iRegexp),
          "$ilike": Symbol(iLike),
          "$in": Symbol(in),
          "$is": Symbol(is),
          "$like": Symbol(like),
          "$lt": Symbol(lt),
          "$lte": Symbol(lte),
          "$ne": Symbol(ne),
          "$noExtendLeft": Symbol(noExtendLeft),
          "$noExtendRight": Symbol(noExtendRight),
          "$not": Symbol(not),
          "$notBetween": Symbol(notBetween),
          "$notILike": Symbol(notILike),
          "$notIRegexp": Symbol(notIRegexp),
          "$notIn": Symbol(notIn),
          "$notLike": Symbol(notLike),
          "$notRegexp": Symbol(notRegexp),
          "$notlike": Symbol(notLike),
          "$or": Symbol(or),
          "$overlap": Symbol(overlap),
          "$raw": Symbol(raw),
          "$regexp": Symbol(regexp),
          "$strictLeft": Symbol(strictLeft),
          "$strictRight": Symbol(strictRight),
          "$values": Symbol(values),
          "&&": Symbol(overlap),
          "..": Symbol(between),
          "<@": Symbol(contained),
          "@>": Symbol(contains),
          "between": Symbol(between),
          "gt": Symbol(gt),
          "gte": Symbol(gte),
          "ilike": Symbol(iLike),
          "in": Symbol(in),
          "like": Symbol(like),
          "lt": Symbol(lt),
          "lte": Symbol(lte),
          "nbetween": Symbol(notBetween),
          "ne": Symbol(ne),
          "nlike": Symbol(notLike),
          "not": Symbol(not),
          "notIn": Symbol(notIn),
          "notbetween": Symbol(notBetween),
          "notilike": Symbol(notILike),
          "overlap": Symbol(overlap),
        },
        "_castKey": [Function],
        "_checkValidJsonStatement": [Function],
        "_dialect": PostgresDialect {
          "QueryGenerator": [Circular],
          "connectionManager": ConnectionManager {
            "_onProcessExit": [Function],
            "config": Object {
              "database": "videos",
              "dialectModulePath": null,
              "dialectOptions": undefined,
              "host": "localhost",
              "keepDefaultTimezone": undefined,
              "native": false,
              "password": null,
              "pool": Object {
                "Promise": [Function],
                "acquire": 10000,
                "evict": 10000,
                "handleDisconnects": true,
                "idle": 10000,
                "max": 5,
                "min": 0,
                "validate": [Function],
              },
              "port": undefined,
              "protocol": "tcp",
              "replication": false,
              "ssl": undefined,
              "username": "",
            },
            "dialect": [Circular],
            "dialectName": "postgres",
            "lib": PG {
              "Client": [Function],
              "Connection": [Function],
              "Pool": [Function],
              "Query": [Function],
              "_pools": Array [],
              "defaults": Object {
                "application_name": undefined,
                "binary": false,
                "client_encoding": "",
                "connectionString": undefined,
                "database": "Anuar",
                "fallback_application_name": undefined,
                "host": "localhost",
                "idleTimeoutMillis": 30000,
                "max": 10,
                "parseInputDatesAsUTC": false,
                "parseInt8": undefined,
                "password": null,
                "port": 5432,
                "rows": 0,
                "ssl": false,
                "statement_timeout": false,
                "user": "Anuar",
              },
              "native": null,
              "types": Object {
                "arrayParser": Object {
                  "create": [Function],
                },
                "getTypeParser": [Function],
                "setTypeParser": [Function],
              },
            },
            "pool": Pool {
              "_Promise": [Function],
              "_allObjects": Set {},
              "_availableObjects": Deque {
                "_list": DoublyLinkedList {
                  "head": null,
                  "length": 0,
                  "tail": null,
                },
              },
              "_config": PoolOptions {
                "Promise": [Function],
                "acquireTimeoutMillis": 10000,
                "autostart": false,
                "evictionRunIntervalMillis": 10000,
                "fifo": true,
                "idleTimeoutMillis": 10000,
                "max": 5,
                "min": 0,
                "numTestsPerEvictionRun": 3,
                "priorityRange": 1,
                "softIdleTimeoutMillis": -1,
                "testOnBorrow": true,
                "testOnReturn": false,
              },
              "_draining": false,
              "_events": Object {},
              "_eventsCount": 0,
              "_evictionIterator": DequeIterator {
                "_cursor": null,
                "_direction": "next",
                "_done": false,
                "_list": DoublyLinkedList {
                  "head": null,
                  "length": 0,
                  "tail": null,
                },
                "_startPosition": "head",
                "_started": false,
              },
              "_evictor": DefaultEvictor {},
              "_factory": Object {
                "create": [Function],
                "destroy": [Function],
                "validate": [Function],
              },
              "_factoryCreateOperations": Set {},
              "_factoryDestroyOperations": Set {},
              "_maxListeners": undefined,
              "_resourceLoans": Map {},
              "_scheduledEviction": null,
              "_started": false,
              "_testOnBorrowResources": Set {},
              "_testOnReturnResources": Set {},
              "_validationOperations": Set {},
              "_waitingClientsQueue": PriorityQueue {
                "_size": 1,
                "_slots": Array [
                  Queue {
                    "_list": DoublyLinkedList {
                      "head": null,
                      "length": 0,
                      "tail": null,
                    },
                  },
                ],
              },
              "domain": null,
            },
            "sequelize": [Circular],
            "versionPromise": null,
          },
          "sequelize": [Circular],
        },
        "_findField": [Function],
        "_getJsonCast": [Function],
        "_getSafeKey": [Function],
        "_joinKeyValue": [Function],
        "_prefixKey": [Function],
        "_replaceAliases": [Function],
        "_templateSettings": Object {
          "escape": /<%-\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "evaluate": /<%\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "imports": Object {
            "_": [Function],
          },
          "interpolate": /<%=\\(\\[\\\\s\\\\S\\]\\+\\?\\)%>/g,
          "variable": "",
        },
        "_toJSONValue": [Function],
        "_traverseJSON": [Function],
        "_whereBind": [Function],
        "_whereGroupBind": [Function],
        "_whereJSON": [Function],
        "_whereParseSingleValueObject": [Function],
        "addColumnQuery": [Function],
        "addConstraintQuery": [Function],
        "addIndexQuery": [Function],
        "addLimitAndOffset": [Function],
        "addSchema": [Function],
        "arithmeticQuery": [Function],
        "attributeToSQL": [Function],
        "attributesToSQL": [Function],
        "booleanValue": [Function],
        "bulkInsertQuery": [Function],
        "changeColumnQuery": [Function],
        "commitTransactionQuery": [Function],
        "createFunction": [Function],
        "createSchema": [Function],
        "createTableQuery": [Function],
        "createTrigger": [Function],
        "dataTypeMapping": [Function],
        "databaseConnectionUri": [Function],
        "decodeTriggerEventType": [Function],
        "deferConstraintsQuery": [Function],
        "deleteQuery": [Function],
        "describeTableQuery": [Function],
        "dialect": "postgres",
        "dropForeignKeyQuery": [Function],
        "dropFunction": [Function],
        "dropSchema": [Function],
        "dropTableQuery": [Function],
        "dropTrigger": [Function],
        "escape": [Function],
        "escapeAttributes": [Function],
        "exceptionFn": [Function],
        "expandFunctionParamList": [Function],
        "expandOptions": [Function],
        "expandTriggerEventSpec": [Function],
        "extractTableDetails": [Function],
        "fn": [Function],
        "fromArray": [Function],
        "generateInclude": [Function],
        "generateJoin": [Function],
        "generateThroughJoin": [Function],
        "generateTransactionId": [Function],
        "getConstraintSnippet": [Function],
        "getForeignKeysQuery": [Function],
        "getQueryOrders": [Function],
        "getWhereConditions": [Function],
        "handleSequelizeMethod": [Function],
        "insertQuery": [Function],
        "isIdentifierQuoted": [Function],
        "jsonPathExtractionQuery": [Function],
        "nameIndexes": [Function],
        "options": Object {
          "benchmark": false,
          "databaseVersion": 0,
          "define": Object {},
          "dialect": "postgres",
          "dialectModulePath": null,
          "hooks": Object {},
          "host": "localhost",
          "isolationLevel": null,
          "logging": [Function],
          "native": false,
          "omitNull": false,
          "operatorsAliases": true,
          "pool": Object {},
          "protocol": "tcp",
          "query": Object {},
          "quoteIdentifiers": true,
          "replication": false,
          "retry": Object {
            "match": Array [
              "SQLITE_BUSY: database is locked",
            ],
            "max": 5,
          },
          "ssl": undefined,
          "sync": Object {},
          "timezone": "+00:00",
          "transactionType": "DEFERRED",
          "typeValidation": false,
        },
        "padInt": [Function],
        "parseConditionObject": [Function],
        "pgEnum": [Function],
        "pgEnumAdd": [Function],
        "pgEnumDrop": [Function],
        "pgEnumName": [Function],
        "pgEscapeAndQuote": [Function],
        "pgListEnums": [Function],
        "quote": [Function],
        "quoteIdentifier": [Function],
        "quoteIdentifiers": [Function],
        "quoteTable": [Function],
        "removeColumnQuery": [Function],
        "removeConstraintQuery": [Function],
        "removeIndexQuery": [Function],
        "renameColumnQuery": [Function],
        "renameFunction": [Function],
        "renameTableQuery": [Function],
        "renameTrigger": [Function],
        "rollbackTransactionQuery": [Function],
        "selectFromTableFragment": [Function],
        "selectQuery": [Function],
        "sequelize": [Circular],
        "setAutocommitQuery": [Function],
        "setConstraintQuery": [Function],
        "setDeferredQuery": [Function],
        "setImmediateQuery": [Function],
        "setIsolationLevelQuery": [Function],
        "setOperatorsAliases": [Function],
        "setSearchPath": [Function],
        "showConstraintsQuery": [Function],
        "showIndexesQuery": [Function],
        "showSchemasQuery": [Function],
        "showTablesQuery": [Function],
        "startTransactionQuery": [Function],
        "triggerEventTypeIsConstraint": [Function],
        "typeValidation": undefined,
        "updateQuery": [Function],
        "upsertQuery": [Function],
        "versionQuery": [Function],
        "whereItemQuery": [Function],
        "whereItemsQuery": [Function],
        "whereQuery": [Function],
      },
      "sequelize": [Circular],
    },
    "test": Object {
      "_runningQueries": 0,
      "_trackRunningQueries": false,
      "trackRunningQueries": [Function],
      "verifyNoRunningQueries": [Function],
    },
  },
  "video": [Function],
  "view": [Function],
}
`;
